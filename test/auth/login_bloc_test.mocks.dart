// Mocks generated by Mockito 5.4.2 from annotations
// in flutter_quotes/test/auth/login_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_quotes/app/domain/email_address.dart' as _i7;
import 'package:flutter_quotes/app/domain/password.dart' as _i8;
import 'package:flutter_quotes/app/domain/quote_user.dart' as _i6;
import 'package:flutter_quotes/auth/domain/auth_failure.dart' as _i5;
import 'package:flutter_quotes/auth/infrastructure/auth_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOption_0<A> extends _i1.SmartFake implements _i2.Option<A> {
  _FakeOption_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Option<_i2.Either<_i5.AuthFailure, _i6.QuoteUser>>>
      signInWithEmailAndPassword({
    required _i7.EmailAddress? emailAddress,
    required _i8.Password? password,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #signInWithEmailAndPassword,
              [],
              {
                #emailAddress: emailAddress,
                #password: password,
              },
            ),
            returnValue: _i4.Future<
                    _i2
                    .Option<_i2.Either<_i5.AuthFailure, _i6.QuoteUser>>>.value(
                _FakeOption_0<_i2.Either<_i5.AuthFailure, _i6.QuoteUser>>(
              this,
              Invocation.method(
                #signInWithEmailAndPassword,
                [],
                {
                  #emailAddress: emailAddress,
                  #password: password,
                },
              ),
            )),
          ) as _i4
              .Future<_i2.Option<_i2.Either<_i5.AuthFailure, _i6.QuoteUser>>>);

  @override
  _i4.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> canCheckBiometrics() => (super.noSuchMethod(
        Invocation.method(
          #canCheckBiometrics,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.Option<_i2.Either<_i5.AuthFailure, _i6.QuoteUser>>>
      signInWithBiometric() => (super.noSuchMethod(
            Invocation.method(
              #signInWithBiometric,
              [],
            ),
            returnValue: _i4.Future<
                    _i2
                    .Option<_i2.Either<_i5.AuthFailure, _i6.QuoteUser>>>.value(
                _FakeOption_0<_i2.Either<_i5.AuthFailure, _i6.QuoteUser>>(
              this,
              Invocation.method(
                #signInWithBiometric,
                [],
              ),
            )),
          ) as _i4
              .Future<_i2.Option<_i2.Either<_i5.AuthFailure, _i6.QuoteUser>>>);
}
